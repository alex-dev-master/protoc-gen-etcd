// Code generated by protoc-gen-etcd. DO NOT EDIT.
package proto

import (
	context "context"
	"encoding/json"

	"fmt"
	v3 "go.etcd.io/etcd/client/v3"
)

const (
	serviceNamePrefix = "/forms"
)

// EtcdClient предоставляет методы для работы с etcd
type EtcdClient struct {
	client *v3.Client
}

type EtcdConfig struct {
	Endpoints   []string
	DialTimeout int64
	Username    string
	Password    string
}

func NewEtcdClient(cfg *EtcdConfig) (*EtcdClient, error) {
	if cfg == nil {
		return fmt.Errorf("empty config")
	}

	cli, err := v3.New(v3.Config{
		Endpoints:   cfg.Endpoints,
		DialTimeout: cfg.DialTimeout,
		Username:    cfg.Username,
		Password:    cfg.Password,
	})
	if err != nil {
		return nil, err
	}
	return &EtcdClient{client: cli}, nil
}

func (c *EtcdClient) GetLimitsKey(ctx context.Context, rq *LimitsKeyRequest) (resp *LimitsValue, err error) {
	key := fmt.Sprintf("/forms/config/%s/%s/limits", rq.PsCode, rq.Type)
	respEtcd, err := c.client.Get(ctx, key)
	if err != nil {
		return nil, err
	}

	for _, v := range respEtcd.Kvs {
		err = json.Unmarshal(v.Value, resp)
		if err != nil {
			return nil, err
		}
		return resp, nil
	}

	return nil, fmt.Errorf("key not found")
}
