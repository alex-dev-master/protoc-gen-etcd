const (
    serviceNamePrefix = "{{.KeyPrefix}}"
)

var (
    ErrorClientEmptyConfig = {{$.Imports.errors.Ident "New"}}("empty config")
    ErrorKeyNotFound = {{$.Imports.errors.Ident "New"}}("key not found")
)

// EtcdClient предоставляет методы для работы с etcd
type EtcdClient struct {
	client *{{$.Imports.clientv3.Ident "Client"}}
}

type EtcdConfig struct {
    Endpoints []string
    DialTimeout {{$.Imports.time.Ident "Duration"}}
    Username string
    Password string
    TLSInfo *{{$.Imports.transport.Ident "TLSInfo"}}
}

func NewEtcdClient(cfg *EtcdConfig) (*EtcdClient, error) {
    if cfg == nil {
        return nil, ErrorClientEmptyConfig
    }

    var tlsConfig *tls.Config
    if tlsInfo != nil {
        if tlsConfig, err = tlsInfo.ClientConfig(); err != nil {
            return nil, err
        }
    }

	cli, err := {{$.Imports.clientv3.Ident "New"}}({{$.Imports.clientv3.Ident "Config"}}{
		Endpoints:   cfg.Endpoints,
		DialTimeout: cfg.DialTimeout,
		Username:    cfg.Username,
        Password:    cfg.Password,
        TLSInfo:     tlsConfig,
	})
	if err != nil {
		return nil, err
	}
	return &EtcdClient{client: cli}, nil
}
